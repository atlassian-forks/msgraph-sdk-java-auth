apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
}

dependencies {
    // Use JUnit and mockito test framework
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.7.7'
    implementation 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.2'
    implementation 'com.microsoft.graph:microsoft-graph-core:1.0.8'
    implementation 'com.microsoft.graph:microsoft-graph:2.7.1'
}

def pomConfig = {
    licenses {
        license([:]) {
            name "MIT License"
            url "http://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//Publishing tasks-
//Maven Central Snapshot: publishSnapshotPublicationToMavenRepository
//Maven Central Release: publishMavenCentralReleasePublicationToMaven2Repository

publishing {

    publications {

        maven(MavenPublication) {

            groupId 'com.microsoft.graph'

            artifactId 'microsoft-graph-auth'

            version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenArtifactSuffix}"

            from components.java

            artifact sourceJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Microsoft Graph Auth SDK for Java')
                root.appendNode('url', 'https://github.com/microsoftgraph/msgraph-sdk-java-auth')
                root.children().last() + pomConfig
                def pomFile = file("${project.buildDir}/libs/microsoft-graph-auth.pom")
                writeTo(pomFile)
            }

        }
        Snapshot(MavenPublication) {
        	customizePom(pom)
        	groupId 'com.microsoft.graph'
        	artifactId 'microsoft-graph-auth'
        	version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenCentralSnapshotArtifactSuffix}"
        	from components.java
        	pom.withXml {
        		def pomFile = file("${project.buildDir}/generated-pom.xml")
        		writeTo(pomFile)
        	}
        	artifact(sourceJar) {
        		classifier = 'sources'
        	}
        	artifact(javadocJar) {
        		classifier = 'javadoc'
        	}
		}
		
		mavenCentralRelease(MavenPublication) {
        	customizePom(pom)
        	groupId 'com.microsoft.graph'
        	artifactId 'microsoft-graph-auth'
        	version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}"
        	from components.java
        	pom.withXml {
        		def pomFile = file("${project.buildDir}/generated-pom.xml")
        		writeTo(pomFile)
        	}
        	artifact(sourceJar) {
        		classifier = 'sources'
        	}
        	artifact(javadocJar) {
        		classifier = 'javadoc'
        	}
		}
    }
	repositories {
        maven {
            url = project.property('mavenCentralSnapshotUrl')
            
            credentials {
    			if (project.rootProject.file('local.properties').exists()) {
        			Properties properties = new Properties()
        			properties.load(project.rootProject.file('local.properties').newDataInputStream())
        			username = properties.getProperty('sonatypeUsername')
        			password = properties.getProperty('sonatypePassword')
    			}
            }
        }
        
        maven {
            url = project.property('mavenCentralReleaseUrl')
            
            credentials {
    			if (project.rootProject.file('local.properties').exists()) {
        			Properties properties = new Properties()
        			properties.load(project.rootProject.file('local.properties').newDataInputStream())
        			username = properties.getProperty('sonatypeUsername')
        			password = properties.getProperty('sonatypePassword')
    			}
            }
        }
    }

}

compileJava {
  sourceCompatibility = 1.7
  targetCompatibility = 1.7
}

def getVersionCode() {
    return mavenMajorVersion.toInteger() * 10000 + mavenMinorVersion.toInteger() * 100 + mavenPatchVersion.toInteger()
}

def getVersionName() {
    return "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenArtifactSuffix}"
}

artifacts {
	archives jar
	archives sourceJar
	archives javadocJar
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Microsoft Graph SDK Auth'
            name 'Microsoft Graph Java SDK Auth'
            url 'https://github.com/microsoftgraph/msgraph-sdk-java-auth'
            organization {
                name 'Microsoft'
                url 'https://github.com/microsoftgraph/msgraph-sdk-java-auth'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/microsoftgraph/msgraph-sdk-java-auth/issues'
            }
            licenses {
                license {
                    name "MIT License"
            		url "http://opensource.org/licenses/MIT"
            		distribution "repo"
                }
            }
            scm {
                url 'https://github.com/microsoftgraph/msgraph-sdk-java-auth'
            	connection 'scm:git:git://github.com/microsoftgraph/msgraph-sdk-java-auth.git'
            	developerConnection 'scm:git:ssh://git@github.com:microsoftgraph/msgraph-sdk-java-auth.git'
            }
            developers {
                developer {
                    name 'Microsoft'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenCentralRelease
}
tasks.withType(Sign)*.enabled = mavenCentralPublishingEnabled.toBoolean()

gradle.taskGraph.whenReady { taskGraph ->
	if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        tasks.withType(Sign)*.enabled = (properties.containsKey('enableSigning')) ? properties.getProperty('enableSigning').toBoolean() : false
        allprojects { ext."signing.keyId" = properties.getProperty('signing.keyId') }
        allprojects { ext."signing.secretKeyRingFile" = properties.getProperty('signing.secretKeyRingFile') }
		allprojects { ext."signing.password" = properties.getProperty('signing.password') }
    }
}

model {
    tasks.generatePomFileForMavenCentralReleasePublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}
